
/**
 * 값으로써의 함수와 클로저
 * 03 예제에 담겨있는 몇가지 이야기를 살펴보기
 */

function addMaker(a) {
    return function(b) {
        return a + b;
    }
}

addMaker(10)(5)

var add5 = addMaker(5);
add5(3);
add5(4);

var add3 = addMaker(3);
add3(3);
add3(4);

/**
 * 함수는 값을 리턴할 수 있고 함수는 값이 될 수 있다
 * addMaker는 내부에서 함수를 정의하고 리턴했다 
 * 
 * 이로써 addMaker가 리턴한 익명함수는 클로저가 되었다
 * 리턴된 익명함수 내부에서 a가 정의된 적이 없지만 a를 참조하고 있다
 * a는 부모 스코프에 있다 
 * 
 * addMaker 함수의 경우는 a를 변경시키지 않고 있기 때문에 
 * 항상 동일한 값을 갖는다.
 * 
 * 때문에 위 상황에서는 a는 불변하며 상수로 쓰이게 된다.
 * 이 상황에서 a는 불변하지만, 모든 경우의 클로저가 그렇지는 않다
 * 클로저가 기억하는 변수의 값은 변할 수 있다
 * 
 * 위 코드에서 기억할 부분은 값으로서의 함수와 클로저를 이용한 함수형 자바스크립트 스타일이라는 점이다
 */